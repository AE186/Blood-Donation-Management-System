// <auto-generated />
using System;
using BDMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BDMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221122152527_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BDMS.Models.Area", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("BDMS.Models.BloodBag", b =>
                {
                    b.Property<int>("BagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BagId"));

                    b.Property<string>("BloodGrp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("History")
                        .HasColumnType("int");

                    b.HasKey("BagId");

                    b.HasIndex("History");

                    b.ToTable("BloodBags");
                });

            modelBuilder.Entity("BDMS.Models.BloodCamp", b =>
                {
                    b.Property<int>("OrgCode")
                        .HasColumnType("int");

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("beds")
                        .HasColumnType("int");

                    b.HasKey("OrgCode", "AreaCode");

                    b.HasIndex("AreaCode");

                    b.ToTable("BloodCamps");
                });

            modelBuilder.Entity("BDMS.Models.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectBag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectDonor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiseaseId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("BDMS.Models.Donor", b =>
                {
                    b.Property<int>("Cnic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cnic"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cnic");

                    b.HasIndex("AreaCode");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("BDMS.Models.Emplopyee", b =>
                {
                    b.Property<int>("Cnic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cnic"));

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgCode")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cnic");

                    b.HasIndex("AreaCode");

                    b.HasIndex("OrgCode");

                    b.ToTable("Emplopyees");
                });

            modelBuilder.Entity("BDMS.Models.Organization", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("AreaCode");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("BDMS.Models.Slot", b =>
                {
                    b.Property<int>("SlotNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotNo"));

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<string>("CanDonate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonorCnic")
                        .HasColumnType("int");

                    b.Property<int>("OrgCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("bedno")
                        .HasColumnType("int");

                    b.HasKey("SlotNo");

                    b.HasIndex("AreaCode");

                    b.HasIndex("DonorCnic");

                    b.HasIndex("OrgCode");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("BDMS.Models.TestedBags", b =>
                {
                    b.Property<int>("BagId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.HasKey("BagId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("TestedBags");
                });

            modelBuilder.Entity("BDMS.Models.BloodBag", b =>
                {
                    b.HasOne("BDMS.Models.Slot", "Slot")
                        .WithMany("BloodBags")
                        .HasForeignKey("History")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("BDMS.Models.BloodCamp", b =>
                {
                    b.HasOne("BDMS.Models.Area", "Area")
                        .WithMany("BloodCamps")
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Organization", "Organization")
                        .WithMany("BloodCamps")
                        .HasForeignKey("OrgCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BDMS.Models.Donor", b =>
                {
                    b.HasOne("BDMS.Models.Area", "Area")
                        .WithMany("Donors")
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("BDMS.Models.Emplopyee", b =>
                {
                    b.HasOne("BDMS.Models.Area", "Area")
                        .WithMany("Emplopyees")
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Organization", "Organization")
                        .WithMany("Emplopyees")
                        .HasForeignKey("OrgCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BDMS.Models.Organization", b =>
                {
                    b.HasOne("BDMS.Models.Area", "Area")
                        .WithMany("Organizations")
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("BDMS.Models.Slot", b =>
                {
                    b.HasOne("BDMS.Models.Area", "Area")
                        .WithMany("Slots")
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Donor", "Donor")
                        .WithMany("Slots")
                        .HasForeignKey("DonorCnic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Organization", "Organization")
                        .WithMany("Slots")
                        .HasForeignKey("OrgCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Donor");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BDMS.Models.TestedBags", b =>
                {
                    b.HasOne("BDMS.Models.BloodBag", "BloodBag")
                        .WithMany("TestedBags")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDMS.Models.Disease", "Disease")
                        .WithMany("TestedBags")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodBag");

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("BDMS.Models.Area", b =>
                {
                    b.Navigation("BloodCamps");

                    b.Navigation("Donors");

                    b.Navigation("Emplopyees");

                    b.Navigation("Organizations");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("BDMS.Models.BloodBag", b =>
                {
                    b.Navigation("TestedBags");
                });

            modelBuilder.Entity("BDMS.Models.Disease", b =>
                {
                    b.Navigation("TestedBags");
                });

            modelBuilder.Entity("BDMS.Models.Donor", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("BDMS.Models.Organization", b =>
                {
                    b.Navigation("BloodCamps");

                    b.Navigation("Emplopyees");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("BDMS.Models.Slot", b =>
                {
                    b.Navigation("BloodBags");
                });
#pragma warning restore 612, 618
        }
    }
}
